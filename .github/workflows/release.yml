name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      generate_changelog:
        description: 'Generate changelog'
        required: true
        default: true
        type: boolean

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        id: bump-version
        run: |
          # Read current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Parse the version into components
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Determine new version based on input
          if [[ "${{ github.event.inputs.version_type }}" == "major" ]]; then
            NEW_VERSION="$((MAJOR+1)).0.0"
          elif [[ "${{ github.event.inputs.version_type }}" == "minor" ]]; then
            NEW_VERSION="${MAJOR}.$((MINOR+1)).0"
          else
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH+1))"
          fi

          # Update package.json
          npm version $NEW_VERSION --git-tag-version=false

          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        if: ${{ github.event.inputs.generate_changelog == 'true' }}
        id: changelog
        run: |
          CHANGELOG=""
          if [[ "${{ steps.bump-version.outputs.current_version }}" ]]; then
            PREV_TAG="v${{ steps.bump-version.outputs.current_version }}"

            # Check if the tag exists
            if git rev-parse "$PREV_TAG" >/dev/null 2>&1; then
              echo "Generating changelog from $PREV_TAG to HEAD"

              # Collect and format commits
              CHANGELOG=$(git log "$PREV_TAG"..HEAD --pretty=format:"- %s (%h)" --no-merges)
            else
              echo "Previous tag $PREV_TAG not found, generating changelog from all commits"
              # Collect and format all commits
              CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
            fi
          else
            # Collect and format all commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Escape literal newlines for GitHub Actions
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"

          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT

      - name: Create Release Branch
        run: |
          BRANCH_NAME="release/v${{ steps.bump-version.outputs.new_version }}"
          git checkout -b "$BRANCH_NAME"
          git add package.json
          git commit -m "chore: bump version to ${{ steps.bump-version.outputs.new_version }}"
          git push --set-upstream origin "$BRANCH_NAME"
          echo "Created branch $BRANCH_NAME"

      - name: Create Pull Request
        id: create-pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Release v${{ steps.bump-version.outputs.new_version }}',
              body: 'This PR bumps the version to ${{ steps.bump-version.outputs.new_version }}.\n\n## Changelog\n${{ steps.changelog.outputs.changelog }}',
              head: 'release/v${{ steps.bump-version.outputs.new_version }}',
              base: 'master'
            });
            return pull.number;

      - name: Create Draft Release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ steps.bump-version.outputs.new_version }}',
              name: 'v${{ steps.bump-version.outputs.new_version }}',
              body: '${{ steps.changelog.outputs.changelog }}',
              draft: true,
              prerelease: false,
              generate_release_notes: false
            });

            console.log(`Draft release created: ${data.html_url}`);
